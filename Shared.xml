<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// -=Global Declarations=-
// Sensor Values
const int CLEAR   = 75;
const int BLOCKED = 70;
const int YELLOW  = 60;
const int BLACK   = 45;

const int total_duration = 133;  //currently total duration is equal to the value Done

const bool countBagsDelivered:=false;
const bool singleFeedBelt:=true;
const bool blackBagsOnly:=false;
const int maxBagsIntroduced:=20;

// Bags
const int NUM_BAGS=3;
typedef int[0, NUM_BAGS-1] t_id;

// FeedBelt Sensors
int Sensor[2] = {CLEAR, CLEAR};
int Sensor_output[2] = {CLEAR, CLEAR};
int Sensor_input[2] = {CLEAR, CLEAR};

// Place global declarations here.
const int speed_belt =20;

// Motor and Conveyor Belt
bool fwd; //direction of the distribution belt
bool dis_on; //is the distribution belt on or off
bool feed_on[2]; //array of the boolean for each of the feed belts

// Collision Sections. 
// Section C and D for both Feeding Belts
int collision[2];

// Counters
int BagsOnFeed[2];
int BagsInSystem;
int Delivered[2] = {0,0};
int FaultyDelivery[2];

// Channels
chan dis_start, dis_stop, dis_forward, dis_back; // chanels to start, stop and change direction of the distribution belt
chan feed_off_[2], feed_on_[2] ;                 //chanels to start and stop the two feed belts


chan Init, checkin0, checkin1, colorT, colorF;   //used by the user to set the bags on the feed
chan Sensor_[2];
urgent chan start_sensor[2];
urgent chan go[2];
urgent chan stop_feed[2];
urgent chan feed[2];
urgent chan returnStop[2];
urgent chan continue_feed[2];


// Feed Belt Timing Delays and durations
// -SENSOR-
const int pre_sensor_delay = 80/20;        // pre stable Sensor Reading
const int active_sensor_time = (200)/20;   // Active Sensor Area
//const int post_sensor_time = 40/20;        // Time before pause section B 
const int post_sensor_delay = 40/20;       // post stable Sensor Reading

// Question 5:
//const int pre_sensor_delay = 150/20;        // pre stable Sensor Reading
//const int active_sensor_time = 130/20;   // Active Sensor Area

//shorter period, showing that yellow would not be sorted right
//const int pre_sensor_delay = 38/20;        // pre stable Sensor Reading
//const int active_sensor_time = 242/20;   // Active Sensor Area


// -Section B-
const int pre_stop = 480/20;                // after sensor before queue | pause placement in Section B

const int motor_stop = active_sensor_time+post_sensor_delay+pre_stop-1;

int c_min = 24;
int c_max = 27;
int d_min = 22;
int d_max = 23;
int e_min = 10;
int e_max = 12;
int f_min = 25;
int f_max = 31;

</declaration>
	<template>
		<name>FeedBelt_Controller</name>
		<parameter>const int[0,1] belt</parameter>
		<declaration>int now =0;
int done = 40;
clock x;
bool destA;
bool closeToA;
bool sensorActive;
</declaration>
		<location id="id0" x="-510" y="-391">
			<label kind="comments" x="-680" y="-408">INITIAL CONDITION
TURN ON FEEDBELT</label>
			<committed/>
		</location>
		<location id="id1" x="-509" y="-306">
		</location>
		<location id="id2" x="-297" y="136">
			<committed/>
		</location>
		<location id="id3" x="-510" y="-170">
			<label kind="invariant" x="-493" y="-179">x&lt;=pre_sensor_delay</label>
		</location>
		<location id="id4" x="-510" y="-102">
			<label kind="invariant" x="-493" y="-110">x&lt;=motor_stop</label>
		</location>
		<location id="id5" x="-297" y="-34">
			<label kind="invariant" x="-280" y="-42">x &lt;= done - now</label>
		</location>
		<location id="id6" x="-510" y="-34">
			<urgent/>
		</location>
		<location id="id7" x="-680" y="136">
			<name x="-731" y="94">End_of_feed_belt</name>
			<committed/>
		</location>
		<location id="id8" x="-510" y="85">
			<label kind="invariant" x="-484" y="76">x &lt;= 1</label>
		</location>
		<location id="id9" x="-510" y="136">
			<committed/>
		</location>
		<location id="id10" x="-509" y="-229">
			<committed/>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id10"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-501" y="-212">start_sensor[belt]!</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id7"/>
			<label kind="guard" x="-654" y="119">destA==closeToA</label>
			<label kind="assignment" x="-654" y="136">done:=done+69</label>
			<nail x="-552" y="136"/>
			<nail x="-552" y="136"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id7"/>
			<label kind="guard" x="-654" y="187">destA!=closeToA</label>
			<label kind="assignment" x="-654" y="204">done=done+138</label>
			<nail x="-544" y="204"/>
			<nail x="-654" y="204"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id1"/>
			<nail x="-680" y="-272"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id9"/>
			<label kind="guard" x="-442" y="187">destA</label>
			<label kind="synchronisation" x="-442" y="204">dis_forward!</label>
			<nail x="-357" y="204"/>
			<nail x="-467" y="204"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id6"/>
			<label kind="guard" x="-501" y="-85">x==motor_stop</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-500" y="-297">go[belt]?</label>
			<label kind="assignment" x="-501" y="-280">sensorActive=true,
x:=0</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id9"/>
			<label kind="guard" x="-399" y="119">not destA</label>
			<label kind="synchronisation" x="-399" y="136">dis_back!</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id2"/>
			<label kind="guard" x="-288" y="-8">x &gt;= done - now</label>
			<label kind="synchronisation" x="-288" y="9">dis_stop!</label>
			<label kind="assignment" x="-288" y="34">feed_on[belt] = true,
done:=0,
now := 0</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="-501" y="-374">feed_on[belt]:= true, 
closeToA = (belt ==0), 
now:= 0, done :=40</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-493" y="-161">x == pre_sensor_delay</label>
			<label kind="synchronisation" x="-459" y="-127">Sensor_[belt]?</label>
			<label kind="assignment" x="-493" y="-144">destA=(Sensor[belt]&lt;BLACK),
x:=0</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="guard" x="-501" y="8">destA==fwd</label>
			<label kind="assignment" x="-501" y="25">feed_on[belt]:=true, 
x:=0, done:=0</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="guard" x="-484" y="-51">destA!=fwd</label>
			<label kind="assignment" x="-484" y="-34">feed_on[belt]:=false, 
now := now +40, x:=0</label>
			<nail x="-331" y="-34"/>
		</transition>
	</template>
	<template>
		<name>sensor_values</name>
		<parameter>const int[0,1] belt</parameter>
		<declaration>clock x;

const int pre_sensor_delay_original = 40/20;        // pre stable Sensor Reading
const int active_sensor_time_original = (240)/20;   // Active Sensor Area
const int post_sensor_delay_original = 40/20;       // post stable Sensor Reading
const int post_sensor_time_original = 40/20;        // Time before pause section B</declaration>
		<location id="id11" x="-918" y="-170">
			<committed/>
		</location>
		<location id="id12" x="-850" y="-102">
			<committed/>
		</location>
		<location id="id13" x="-918" y="-238">
		</location>
		<location id="id14" x="-850" y="-25" color="#00ffff">
			<name x="-943" y="-51">B_pre_sensor</name>
			<label kind="invariant" x="-824" y="-34">x &lt;= pre_sensor_delay_original</label>
		</location>
		<location id="id15" x="-850" y="68" color="#00ffff">
			<name x="-918" y="42">B_sensor</name>
			<label kind="invariant" x="-824" y="59">x &lt;= active_sensor_time_original</label>
		</location>
		<location id="id16" x="-850" y="153" color="#00ffff">
			<name x="-952" y="127">B_post_sensor</name>
			<label kind="invariant" x="-824" y="144">x &lt;= post_sensor_delay_original</label>
		</location>
		<location id="id17" x="-850" y="238" color="#ffc0cb">
			<committed/>
		</location>
		<location id="id18" x="-1190" y="-102">
			<committed/>
		</location>
		<location id="id19" x="-1190" y="-25" color="#00ffff">
			<name x="-1292" y="-51">Y_pre_sensor</name>
			<label kind="invariant" x="-1164" y="-34">x &lt;= pre_sensor_delay_original</label>
		</location>
		<location id="id20" x="-1190" y="68" color="#00ffff">
			<name x="-1258" y="42">Y_sensor</name>
			<label kind="invariant" x="-1164" y="59">x &lt;= active_sensor_time_original</label>
		</location>
		<location id="id21" x="-1190" y="153" color="#00ffff">
			<name x="-1292" y="127">Y_post_sensor</name>
			<label kind="invariant" x="-1164" y="144">x &lt;= post_sensor_delay_original</label>
		</location>
		<location id="id22" x="-1190" y="238" color="#ffc0cb">
			<committed/>
		</location>
		<init ref="id13"/>
		<transition>
			<source ref="id22"/>
			<target ref="id13"/>
			<nail x="-1292" y="238"/>
			<nail x="-1292" y="-238"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id18"/>
			<label kind="guard" x="-1181" y="-161">Sensor_input[belt] == YELLOW</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id13"/>
			<nail x="-510" y="238"/>
			<nail x="-510" y="-238"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-918" y="-221">start_sensor[belt]?</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id14"/>
			<label kind="assignment" x="-841" y="-85">Sensor_output[belt] = 50,
x:=0</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="guard" x="-884" y="-161">Sensor_input[belt] == BLACK</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="guard" x="-841" y="170">x==post_sensor_delay_original</label>
			<label kind="assignment" x="-841" y="187">Sensor_output[belt]= CLEAR,
x:=0</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="guard" x="-841" y="85">x==active_sensor_time_original</label>
			<label kind="assignment" x="-841" y="102">Sensor_output[belt]= 50,
x:=0</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="guard" x="-841" y="-17">x==pre_sensor_delay_original</label>
			<label kind="assignment" x="-841" y="17">Sensor_output[belt]= 40,
x:=0</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id19"/>
			<label kind="assignment" x="-1181" y="-85">Sensor_output[belt] = 60,
x:=0</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="guard" x="-1181" y="170">x==post_sensor_delay_original</label>
			<label kind="assignment" x="-1181" y="187">Sensor_output[belt]= CLEAR,
x:=0</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="guard" x="-1181" y="85">x==active_sensor_time_original</label>
			<label kind="assignment" x="-1181" y="102">Sensor_output[belt]= 60,
x:=0</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id20"/>
			<label kind="guard" x="-1181" y="-17">x==pre_sensor_delay_original</label>
			<label kind="assignment" x="-1181" y="17">Sensor_output[belt]= 55,
x:=0</label>
		</transition>
	</template>
	<template>
		<name>sensor_values_complicated</name>
		<parameter>const int[0,1] belt</parameter>
		<declaration>clock x;

const int pre_sensor_delay_original = 40/20;        // pre stable Sensor Reading
const int active_sensor_time_original = (240)/20;   // Active Sensor Area
const int post_sensor_delay_original = 40/20;       // post stable Sensor Reading
const int post_sensor_time_original = 40/20;        // Time before pause section B</declaration>
		<location id="id23" x="-1190" y="238" color="#ffc0cb">
			<committed/>
		</location>
		<location id="id24" x="-918" y="-238">
		</location>
		<location id="id25" x="-918" y="-170">
			<committed/>
		</location>
		<location id="id26" x="-1190" y="-102">
			<committed/>
		</location>
		<location id="id27" x="-850" y="238" color="#ffc0cb">
			<committed/>
		</location>
		<location id="id28" x="-850" y="-102">
			<committed/>
		</location>
		<location id="id29" x="-850" y="-25" color="#00ffff">
			<name x="-943" y="-51">B_pre_sensor</name>
			<label kind="invariant" x="-824" y="-34">x &lt;= pre_sensor_delay_original</label>
		</location>
		<location id="id30" x="-850" y="68" color="#00ffff">
			<name x="-918" y="42">B_sensor</name>
			<label kind="invariant" x="-824" y="59">x &lt;= active_sensor_time_original</label>
		</location>
		<location id="id31" x="-850" y="153" color="#00ffff">
			<name x="-952" y="127">B_post_sensor</name>
			<label kind="invariant" x="-824" y="144">x &lt;= post_sensor_delay_original</label>
		</location>
		<location id="id32" x="-1190" y="-25" color="#00ffff">
			<name x="-1292" y="-51">Y_pre_sensor</name>
			<label kind="invariant" x="-1164" y="-34">x &lt;= pre_sensor_delay_original</label>
		</location>
		<location id="id33" x="-1190" y="68" color="#00ffff">
			<name x="-1258" y="42">Y_sensor</name>
			<label kind="invariant" x="-1164" y="59">x &lt;= active_sensor_time_original</label>
		</location>
		<location id="id34" x="-1190" y="153" color="#00ffff">
			<name x="-1292" y="127">Y_post_sensor</name>
			<label kind="invariant" x="-1164" y="144">x &lt;= post_sensor_delay_original</label>
		</location>
		<init ref="id24"/>
		<transition>
			<source ref="id23"/>
			<target ref="id24"/>
			<nail x="-1292" y="238"/>
			<nail x="-1292" y="-238"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id26"/>
			<label kind="guard" x="-1181" y="-161">Sensor_input[belt] == YELLOW</label>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id24"/>
			<nail x="-510" y="238"/>
			<nail x="-510" y="-238"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="-918" y="-221">start_sensor[belt]?</label>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id29"/>
			<label kind="assignment" x="-841" y="-85">Sensor_output[belt] = fint(random_arcsine(30,70)),
x:=0</label>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id28"/>
			<label kind="guard" x="-884" y="-161">Sensor_input[belt] == BLACK</label>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id27"/>
			<label kind="guard" x="-841" y="170">x==post_sensor_delay_original</label>
			<label kind="assignment" x="-841" y="187">Sensor_output[belt]= CLEAR,
x:=0</label>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id31"/>
			<label kind="guard" x="-841" y="85">x==active_sensor_time_original</label>
			<label kind="assignment" x="-841" y="102">Sensor_output[belt]= fint(random_arcsine(30,70)),
x:=0</label>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id30"/>
			<label kind="guard" x="-841" y="-17">x==pre_sensor_delay_original</label>
			<label kind="assignment" x="-841" y="17">Sensor_output[belt]= fint(random_arcsine(30,45)),
x:=0</label>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id32"/>
			<label kind="assignment" x="-1181" y="-85">Sensor_output[belt] = fint(random_arcsine(50,60)),
x:=0</label>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id23"/>
			<label kind="guard" x="-1181" y="170">x==post_sensor_delay_original</label>
			<label kind="assignment" x="-1181" y="187">Sensor_output[belt]= CLEAR,
x:=0</label>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id34"/>
			<label kind="guard" x="-1181" y="85">x==active_sensor_time_original</label>
			<label kind="assignment" x="-1181" y="102">Sensor_output[belt]= fint(random_arcsine(50,70)),
x:=0</label>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id33"/>
			<label kind="guard" x="-1181" y="-17">x==pre_sensor_delay_original</label>
			<label kind="assignment" x="-1181" y="17">Sensor_output[belt]= fint(random_arcsine(50,60)),
x:=0</label>
		</transition>
	</template>
	<template>
		<name>Return_S</name>
		<parameter>const int[0,1] belt</parameter>
		<location id="id35" x="34" y="0">
		</location>
		<init ref="id35"/>
		<transition>
			<source ref="id35"/>
			<target ref="id35"/>
			<label kind="synchronisation" x="76" y="-8">returnStop[belt]!</label>
			<nail x="68" y="-17"/>
			<nail x="68" y="34"/>
		</transition>
	</template>
	<template>
		<name>Bag</name>
		<parameter>t_id bag_id</parameter>
		<declaration>// -=Variable Declarations=-
int feedBelt;
int color;
clock x_bag;    //Aggregate for bag travel time
clock x;        //per element clock

//clock temp_c;

</declaration>
		<location id="id36" x="-272" y="-501">
			<name x="-314" y="-526">initial</name>
		</location>
		<location id="id37" x="136" y="-408">
			<name x="25" y="-417">Destination_B</name>
			<label kind="comments" x="25" y="-442">Bags: YELLOW</label>
			<committed/>
		</location>
		<location id="id38" x="-68" y="-280">
			<label kind="comments" x="-34" y="-306">FEEDBELT 1</label>
			<urgent/>
		</location>
		<location id="id39" x="-646" y="-408">
			<name x="-629" y="-417">Destination_A</name>
			<label kind="comments" x="-629" y="-442">Bags: BLACK</label>
			<committed/>
		</location>
		<location id="id40" x="-272" y="-425">
		</location>
		<location id="id41" x="-272" y="-357">
			<name x="-297" y="-340">Initalized</name>
		</location>
		<location id="id42" x="-476" y="-280">
			<label kind="comments" x="-578" y="-305">FEEDBELT 0</label>
			<urgent/>
		</location>
		<location id="id43" x="-476" y="153" color="#ffc0cb">
			<name x="-544" y="127">fb0_stop</name>
			<urgent/>
		</location>
		<location id="id44" x="-646" y="433" color="#ffa500">
			<name x="-671" y="399">e1</name>
			<label kind="invariant" x="-612" y="407">x &lt;= e_max</label>
		</location>
		<location id="id45" x="136" y="433" color="#ffa500">
			<name x="119" y="399">e2</name>
			<label kind="invariant" x="153" y="407">x &lt;= e_max</label>
		</location>
		<location id="id46" x="-476" y="314" color="#00ff00">
			<name x="-501" y="288">c1</name>
			<label kind="invariant" x="-459" y="297">x &lt;= c_max</label>
		</location>
		<location id="id47" x="-272" y="433" color="#ff00ff">
			<name x="-280" y="399">f</name>
			<label kind="invariant" x="-255" y="416">x &lt;= f_max</label>
		</location>
		<location id="id48" x="-68" y="314" color="#00ff00">
			<name x="-93" y="289">c2</name>
			<label kind="invariant" x="-51" y="297">x &lt;= c_max</label>
		</location>
		<location id="id49" x="-476" y="433" color="#ffff00">
			<name x="-501" y="407">d1</name>
			<label kind="invariant" x="-467" y="407">x &lt;= d_max</label>
		</location>
		<location id="id50" x="-68" y="433" color="#ffff00">
			<name x="-85" y="399">d2</name>
			<label kind="invariant" x="-51" y="407">x &lt;= d_max</label>
		</location>
		<location id="id51" x="-476" y="-178" color="#00ffff">
			<name x="-595" y="-204">fb0_pre_sensor</name>
			<label kind="invariant" x="-450" y="-187">x &lt;= pre_sensor_delay</label>
			<label kind="comments" x="-603" y="-221">SECTION A: Cyan</label>
		</location>
		<location id="id52" x="-476" y="-85" color="#00ffff">
			<name x="-569" y="-110">fb0_sensor</name>
			<label kind="invariant" x="-450" y="-93">x &lt;= active_sensor_time</label>
		</location>
		<location id="id53" x="-476" y="0" color="#00ffff">
			<name x="-595" y="-25">fb0_post_sensor</name>
			<label kind="invariant" x="-450" y="-9">x &lt;= post_sensor_delay</label>
		</location>
		<location id="id54" x="-476" y="93" color="#ffc0cb">
			<name x="-578" y="68">fb0_pre_stop</name>
			<label kind="invariant" x="-450" y="85">x &lt;= pre_stop</label>
			<label kind="comments" x="-603" y="51">SECTION B: Pink</label>
		</location>
		<location id="id55" x="-68" y="93" color="#ffc0cb">
			<name x="-170" y="68">fb1_pre_stop</name>
			<label kind="invariant" x="-42" y="85">x &lt;= pre_stop</label>
			<label kind="comments" x="-195" y="51">SECTION B: Pink</label>
		</location>
		<location id="id56" x="-68" y="153" color="#ffc0cb">
			<name x="-136" y="119">fb1_stop</name>
			<urgent/>
		</location>
		<location id="id57" x="-68" y="0" color="#00ffff">
			<name x="-187" y="-33">fb1_post_sensor</name>
			<label kind="invariant" x="-42" y="-8">x &lt;= post_sensor_delay</label>
		</location>
		<location id="id58" x="-68" y="-178" color="#00ffff">
			<name x="-187" y="-204">fb1_pre_sensor</name>
			<label kind="invariant" x="-42" y="-187">x &lt;= pre_sensor_delay</label>
			<label kind="comments" x="-195" y="-221">SECTION A: Cyan</label>
		</location>
		<location id="id59" x="-68" y="-85" color="#00ffff">
			<name x="-161" y="-110">fb1_sensor</name>
			<label kind="invariant" x="-42" y="-93">x &lt;= active_sensor_time</label>
		</location>
		<location id="id60" x="-272" y="-552">
			<name x="-263" y="-586">Finish</name>
			<committed/>
		</location>
		<location id="id61" x="-306" y="187">
			<name x="-306" y="153">fb0_stopped</name>
		</location>
		<location id="id62" x="102" y="187">
			<name x="92" y="153">fb1_stopped</name>
		</location>
		<init ref="id36"/>
		<transition>
			<source ref="id39"/>
			<target ref="id60"/>
			<label kind="guard" x="-578" y="-518">countBagsDelivered</label>
			<label kind="assignment" x="-578" y="-501">Delivered[0]++</label>
			<nail x="-578" y="-493"/>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id60"/>
			<label kind="guard" x="-34" y="-569">not countBagsDelivered</label>
			<nail x="136" y="-544"/>
		</transition>
		<transition>
			<source ref="id46"/>
			<target ref="id44"/>
			<label kind="guard" x="-637" y="331">fwd and x &gt;= c_min</label>
			<label kind="assignment" x="-578" y="348">x:=0,
collision[0]--</label>
		</transition>
		<transition>
			<source ref="id62"/>
			<target ref="id56"/>
			<label kind="guard" x="-26" y="170">feed_on[1]</label>
			<label kind="synchronisation" x="-51" y="187">returnStop[feedBelt]?</label>
			<nail x="-34" y="187"/>
		</transition>
		<transition>
			<source ref="id56"/>
			<target ref="id62"/>
			<label kind="guard" x="-26" y="128">not feed_on[1]</label>
			<nail x="68" y="153"/>
		</transition>
		<transition>
			<source ref="id61"/>
			<target ref="id43"/>
			<label kind="guard" x="-433" y="170">feed_on[0]</label>
			<label kind="synchronisation" x="-450" y="187">returnStop[feedBelt]?</label>
			<nail x="-442" y="187"/>
		</transition>
		<transition>
			<source ref="id60"/>
			<target ref="id36"/>
			<label kind="assignment" x="-263" y="-544">BagsInSystem--</label>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id60"/>
			<label kind="guard" x="-68" y="-518">countBagsDelivered</label>
			<label kind="assignment" x="-68" y="-501">Delivered[1]++</label>
			<nail x="68" y="-501"/>
		</transition>
		<transition>
			<source ref="id39"/>
			<target ref="id60"/>
			<label kind="guard" x="-628" y="-573">not countBagsDelivered</label>
			<nail x="-646" y="-527"/>
		</transition>
		<transition>
			<source ref="id56"/>
			<target ref="id48"/>
			<label kind="guard" x="-60" y="212">dis_on and feed_on[1]</label>
			<label kind="assignment" x="-60" y="229">x:=0,
BagsOnFeed[1]--,
collision[1]++</label>
		</transition>
		<transition>
			<source ref="id38"/>
			<target ref="id58"/>
			<label kind="guard" x="-59" y="-272">feed_on[1]</label>
			<label kind="synchronisation" x="-59" y="-255">go[feedBelt]!</label>
			<label kind="assignment" x="-59" y="-238">Sensor[1]:=Sensor_output[1],
x:=0</label>
		</transition>
		<transition>
			<source ref="id43"/>
			<target ref="id46"/>
			<label kind="guard" x="-467" y="212">dis_on and feed_on[0]</label>
			<label kind="assignment" x="-467" y="229">x:=0,
BagsOnFeed[0]--,
collision[0]++</label>
		</transition>
		<transition>
			<source ref="id54"/>
			<target ref="id43"/>
			<label kind="guard" x="-467" y="102">x == pre_stop</label>
		</transition>
		<transition>
			<source ref="id53"/>
			<target ref="id54"/>
			<label kind="guard" x="-467" y="17">x==post_sensor_delay</label>
			<label kind="assignment" x="-467" y="34">Sensor[0] := Sensor_output[0],
x := 0</label>
		</transition>
		<transition>
			<source ref="id42"/>
			<target ref="id51"/>
			<label kind="guard" x="-467" y="-272">feed_on[0]</label>
			<label kind="synchronisation" x="-467" y="-255">go[feedBelt]!</label>
			<label kind="assignment" x="-467" y="-238">Sensor[0]:=Sensor_output[0],
x:=0</label>
		</transition>
		<transition>
			<source ref="id52"/>
			<target ref="id53"/>
			<label kind="guard" x="-467" y="-68">x==active_sensor_time</label>
			<label kind="assignment" x="-467" y="-51">Sensor[0] := Sensor_output[0],
x:=0</label>
		</transition>
		<transition>
			<source ref="id51"/>
			<target ref="id52"/>
			<label kind="guard" x="-467" y="-170">x==pre_sensor_delay</label>
			<label kind="synchronisation" x="-467" y="-153">Sensor_[feedBelt]!</label>
			<label kind="assignment" x="-467" y="-136">Sensor[0] := Sensor_output[0],
x:=0</label>
		</transition>
		<transition>
			<source ref="id43"/>
			<target ref="id61"/>
			<label kind="guard" x="-433" y="136">not feed_on[0]</label>
			<nail x="-340" y="153"/>
		</transition>
		<transition>
			<source ref="id45"/>
			<target ref="id37"/>
			<label kind="guard" x="8" y="-374">not fwd and dis_on
and x &gt;= e_min</label>
		</transition>
		<transition>
			<source ref="id50"/>
			<target ref="id45"/>
			<label kind="guard" x="-26" y="433">not fwd and dis_on
and x &gt;= d_min</label>
			<label kind="assignment" x="-26" y="467">x := 0,
collision[1]--</label>
		</transition>
		<transition>
			<source ref="id47"/>
			<target ref="id50"/>
			<label kind="guard" x="-221" y="433">not fwd and dis_on
and x &gt;= f_min</label>
			<label kind="assignment" x="-221" y="467">x := 0,
collision[1]++</label>
		</transition>
		<transition>
			<source ref="id47"/>
			<target ref="id49"/>
			<label kind="guard" x="-416" y="433">fwd and dis_on
and x &gt;= f_min</label>
			<label kind="assignment" x="-416" y="467">x :=0,
collision[0]++</label>
		</transition>
		<transition>
			<source ref="id49"/>
			<target ref="id44"/>
			<label kind="guard" x="-612" y="433">fwd and dis_on
and x &gt;= d_min</label>
			<label kind="assignment" x="-612" y="467">x :=0,
collision[0]--</label>
		</transition>
		<transition>
			<source ref="id44"/>
			<target ref="id39"/>
			<label kind="guard" x="-637" y="-374">fwd and dis_on
and x &gt;= e_min</label>
		</transition>
		<transition>
			<source ref="id48"/>
			<target ref="id45"/>
			<label kind="guard" x="-17" y="331">not fwd and x &lt;= c_max</label>
			<label kind="assignment" x="-43" y="348">x:= 0,
collision[1]--</label>
		</transition>
		<transition>
			<source ref="id48"/>
			<target ref="id47"/>
			<label kind="guard" x="-229" y="331">fwd and x &gt;= c_min</label>
			<label kind="assignment" x="-179" y="348">x:=0,
collision[1]--</label>
		</transition>
		<transition>
			<source ref="id46"/>
			<target ref="id47"/>
			<label kind="guard" x="-416" y="331">not fwd and x &gt;= c_min</label>
			<label kind="assignment" x="-442" y="348">x :=0, 
collision[0]--</label>
		</transition>
		<transition>
			<source ref="id41"/>
			<target ref="id42"/>
			<label kind="synchronisation" x="-459" y="-374">checkin0?</label>
			<label kind="assignment" x="-459" y="-357">feedBelt = 0,
BagsOnFeed[0]++, 
Sensor_input[0] = color</label>
			<nail x="-476" y="-357"/>
		</transition>
		<transition>
			<source ref="id41"/>
			<target ref="id38"/>
			<label kind="synchronisation" x="-212" y="-374">checkin1?</label>
			<label kind="assignment" x="-212" y="-357">feedBelt = 1,
BagsOnFeed[1]++,
Sensor_input[1] = color</label>
			<nail x="-68" y="-357"/>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id40"/>
			<label kind="synchronisation" x="-255" y="-493">Init?</label>
			<label kind="assignment" x="-255" y="-476">x_bag:= 0,
BagsInSystem++</label>
		</transition>
		<transition>
			<source ref="id40"/>
			<target ref="id41"/>
			<label kind="synchronisation" x="-238" y="-425">colorF?</label>
			<label kind="assignment" x="-238" y="-408">color = BLACK</label>
			<nail x="-246" y="-391"/>
		</transition>
		<transition>
			<source ref="id40"/>
			<target ref="id41"/>
			<label kind="synchronisation" x="-408" y="-425">colorT?</label>
			<label kind="assignment" x="-408" y="-409">color = YELLOW</label>
			<nail x="-297" y="-391"/>
		</transition>
		<transition>
			<source ref="id55"/>
			<target ref="id56"/>
			<label kind="guard" x="-59" y="102">x == pre_stop</label>
		</transition>
		<transition>
			<source ref="id57"/>
			<target ref="id55"/>
			<label kind="guard" x="-59" y="17">x==post_sensor_delay</label>
			<label kind="assignment" x="-59" y="34">Sensor[1]:=Sensor_output[1],
x := 0</label>
		</transition>
		<transition>
			<source ref="id59"/>
			<target ref="id57"/>
			<label kind="guard" x="-59" y="-68">x==active_sensor_time</label>
			<label kind="assignment" x="-59" y="-51">Sensor[1]:=Sensor_output[1],
x:=0</label>
		</transition>
		<transition>
			<source ref="id58"/>
			<target ref="id59"/>
			<label kind="guard" x="-59" y="-170">x==pre_sensor_delay</label>
			<label kind="assignment" x="-59" y="-136">Sensor[1]:=Sensor_output[1],
x:=0</label>
		</transition>
	</template>
	<template>
		<name>DisBelt_motor</name>
		<location id="id63" x="-170" y="-136">
			<committed/>
		</location>
		<location id="id64" x="0" y="25">
			<name x="-34" y="42">Dist_stop</name>
			<committed/>
		</location>
		<location id="id65" x="-170" y="-34">
			<name x="-238" y="-59">Forward</name>
		</location>
		<location id="id66" x="162" y="-34">
			<name x="179" y="-60">Back</name>
		</location>
		<init ref="id63"/>
		<transition>
			<source ref="id63"/>
			<target ref="id65"/>
			<label kind="assignment" x="-161" y="-127">dis_on := true,
fwd:=true</label>
		</transition>
		<transition>
			<source ref="id66"/>
			<target ref="id64"/>
			<label kind="synchronisation" x="42" y="-51">dis_stop?</label>
			<label kind="assignment" x="42" y="-34">dis_on := false</label>
			<nail x="43" y="-34"/>
		</transition>
		<transition>
			<source ref="id65"/>
			<target ref="id64"/>
			<label kind="synchronisation" x="-136" y="-51">dis_stop?</label>
			<label kind="assignment" x="-136" y="-34">dis_on := false</label>
			<nail x="-33" y="-34"/>
		</transition>
		<transition>
			<source ref="id64"/>
			<target ref="id65"/>
			<label kind="synchronisation" x="-136" y="0">dis_forward?</label>
			<label kind="assignment" x="-136" y="25">fwd:= true,
dis_on:=true</label>
			<nail x="-144" y="25"/>
		</transition>
		<transition>
			<source ref="id64"/>
			<target ref="id66"/>
			<label kind="synchronisation" x="59" y="8">dis_back?</label>
			<label kind="assignment" x="59" y="25">fwd := false,
dis_on:=true</label>
			<nail x="128" y="25"/>
		</transition>
	</template>
	<template>
		<name>User</name>
		<declaration>bool activelyLoading = false;
int bagsIntroduced:=0;
</declaration>
		<location id="id67" x="816" y="-119">
			<name x="773" y="-85">BagCreated</name>
		</location>
		<location id="id68" x="646" y="-136">
			<name x="570" y="-161">FeedBelt0</name>
			<committed/>
		</location>
		<location id="id69" x="1003" y="-136">
			<name x="1011" y="-161">FeedBelt1</name>
			<committed/>
		</location>
		<location id="id70" x="816" y="-221">
			<committed/>
		</location>
		<location id="id71" x="816" y="-306">
			<name x="806" y="-340">UserReady</name>
		</location>
		<init ref="id71"/>
		<transition>
			<source ref="id71"/>
			<target ref="id70"/>
			<label kind="guard" x="833" y="-297">not activelyLoading and bagsIntroduced &lt;= maxBagsIntroduced</label>
			<label kind="synchronisation" x="825" y="-280">Init!</label>
			<label kind="assignment" x="825" y="-263">activelyLoading:=true</label>
		</transition>
		<transition>
			<source ref="id69"/>
			<target ref="id71"/>
			<nail x="1003" y="-297"/>
		</transition>
		<transition>
			<source ref="id68"/>
			<target ref="id71"/>
			<nail x="646" y="-289"/>
		</transition>
		<transition>
			<source ref="id70"/>
			<target ref="id67"/>
			<label kind="synchronisation" x="731" y="-195">colorT!</label>
			<nail x="782" y="-178"/>
		</transition>
		<transition>
			<source ref="id70"/>
			<target ref="id67"/>
			<label kind="guard" x="850" y="-204">not blackBagsOnly</label>
			<label kind="synchronisation" x="850" y="-187">colorF!</label>
			<nail x="850" y="-178"/>
		</transition>
		<transition>
			<source ref="id67"/>
			<target ref="id69"/>
			<label kind="guard" x="842" y="-119">not singleFeedBelt and BagsOnFeed[1]==0</label>
			<label kind="synchronisation" x="884" y="-153">checkin1!</label>
			<label kind="assignment" x="842" y="-102">activelyLoading=false</label>
		</transition>
		<transition>
			<source ref="id67"/>
			<target ref="id68"/>
			<label kind="guard" x="663" y="-119">BagsOnFeed[0]==0</label>
			<label kind="synchronisation" x="697" y="-153">checkin0!</label>
			<label kind="assignment" x="664" y="-102">activelyLoading=false</label>
		</transition>
	</template>
	<template>
		<name>User_two</name>
		<location id="id72" x="-34" y="-136">
			<name x="-44" y="-170">BagCreated</name>
			<committed/>
		</location>
		<location id="id73" x="-238" y="-136">
			<name x="-306" y="-170">FeedBelt0</name>
			<committed/>
		</location>
		<location id="id74" x="170" y="-136">
			<name x="178" y="-161">FeedBelt1</name>
			<committed/>
		</location>
		<location id="id75" x="-34" y="-246">
			<committed/>
		</location>
		<location id="id76" x="-34" y="-306">
			<name x="-44" y="-340">UserReady</name>
		</location>
		<init ref="id76"/>
		<transition>
			<source ref="id76"/>
			<target ref="id75"/>
			<label kind="synchronisation" x="-25" y="-289">Init!</label>
		</transition>
		<transition>
			<source ref="id74"/>
			<target ref="id76"/>
			<nail x="170" y="-298"/>
		</transition>
		<transition>
			<source ref="id73"/>
			<target ref="id76"/>
			<nail x="-238" y="-298"/>
		</transition>
		<transition>
			<source ref="id75"/>
			<target ref="id72"/>
			<label kind="synchronisation" x="-119" y="-212">colorT!</label>
			<nail x="-68" y="-187"/>
		</transition>
		<transition>
			<source ref="id75"/>
			<target ref="id72"/>
			<label kind="synchronisation" x="8" y="-212">colorF!</label>
			<nail x="0" y="-187"/>
		</transition>
		<transition>
			<source ref="id72"/>
			<target ref="id74"/>
			<label kind="guard" x="8" y="-136">BagsOnFeed[1]==0</label>
			<label kind="synchronisation" x="34" y="-161">checkin1!</label>
		</transition>
		<transition>
			<source ref="id72"/>
			<target ref="id73"/>
			<label kind="guard" x="-195" y="-136">BagsOnFeed[0]==0</label>
			<label kind="synchronisation" x="-170" y="-161">checkin0!</label>
		</transition>
	</template>
	<system>// Place template instantiations here.

// Bag1 = Bag2();
// FeedBelt0 = FeedBelt_motor(0);
// FeedBelt1 = FeedBelt_motor(1);

FeedBelt_Controller0 = FeedBelt_Controller(0);
FeedBelt_Controller1 = FeedBelt_Controller(1);
Return0 = Return_S(0);
Return1 = Return_S(1);
Sensor0 = sensor_values(0);
Sensor1 = sensor_values(1);

// List one or more processes to be composed into a system.
//system Controller, FeedBelt0, FeedBelt1, DisBelt_motor, User, Bag;
//system FeedBelt_Control1er10 FeedBelt_Control1er1=,0, FeedBelt1, DisBelt_motor, User, Bag;
system FeedBelt_Controller0, FeedBelt_Controller1, DisBelt_motor, User, Bag, Return0, Return1, Sensor0, Sensor1;
</system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Bag(0).Destination_A</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Bag(0).Destination_B</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Bag(0).Finish</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Bag(1).Finish</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; forall(i:t_id) Bag(i).Finish</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[](Bag(1).Destination_A imply (Bag(1).x_bag &gt;=74 and Bag(1).x_bag &lt;=79))</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[](Bag(1).Destination_A imply (Bag(1).x_bag &gt;=74 and Bag(1).x_bag &lt;=133))</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[](not (Bag(1).fb0_stopped or Bag(1).fb1_stopped) imply (Bag(1).Destination_A imply (Bag(1).x_bag &gt;=74 and Bag(1).x_bag &lt;=79)))</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (Bag(0).Destination_A imply Bag(0).x_bag &gt;=74)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; (Bag(1).Destination_A and Bag(1).x &gt;=79)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt;(Bag(1).Destination_A || Bag(1).Destination_B )</formula>
			<comment>not finished</comment>
		</query>
		<query>
			<formula>Bag(0).Destination_A --&gt; Bag(0).Finish</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Bag(0).color== YELLOW --&gt; Bag(0).Destination_B</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] ((Bag(0).color == YELLOW) imply A&lt;&gt; Bag(0).Destination_B)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (collision[0] &lt;= 1 and collision[1] &lt;= 1)</formula>
			<comment>for all the paths, there will be no collition in the critical area collision zero or one</comment>
		</query>
		<query>
			<formula>E[] (collision[0] &lt;= 1 and collision[1] &lt;= 1)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Bag(0).Initalized --&gt; Bag(0).Finish</formula>
			<comment>All the bags in destination A will arrive to state finish</comment>
		</query>
		<query>
			<formula>A[] (forall(i:t_id)(Bag(i).c1) imply (feed_on[0]!=0 and feed_on[1]!=0 and dis_on!=0))</formula>
			<comment></comment>
		</query>
		<query>
			<formula>--&gt;</formula>
			<comment>leads to </comment>
		</query>
		<query>
			<formula>A[] Bag(0).Destination_A imply Bag(0).color == BLACK
</formula>
			<comment>For all the execution paths, the bag zero in destination A have a the black color.</comment>
		</query>
		<query>
			<formula>A[] Bag(0).Destination_B imply Bag(0).color == YELLOW</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] Bag(1).Destination_A imply Bag(1).color == BLACK
</formula>
			<comment>For all the execution paths, the bag one in destination A have a the black color.</comment>
		</query>
		<query>
			<formula>A[] (Bag(1).Destination_A imply Bag(1).color == BLACK) and (Bag(1).Destination_B imply Bag(1).color == YELLOW) 
</formula>
			<comment>For all the execution paths, the bag one in destination A have a the black color. In the other case that the same bag in in destination B then in have the color yellow. </comment>
		</query>
		<query>
			<formula>A&lt;&gt; (Bag(0).Destination_A or Bag(0).Destination_B)</formula>
			<comment>There exists a path where bag zero gets to either destination A or destination B</comment>
		</query>
		<query>
			<formula>E&lt;&gt;(Bag(0).Initalized) --&gt; (Bag(0).Destination_A or Bag(0).Destination_B) </formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; (Bag(1).Destination_A or Bag(1).Destination_B)</formula>
			<comment>There exists a path where bag one gets to either destination A or destination B</comment>
		</query>
		<query>
			<formula>E&lt;&gt; forall(i:t_id)(Bag(i).Destination_A or Bag(i).Destination_B)</formula>
			<comment>There exists a path where all the bags in the sysyem gets to either destination A or destination B</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Bag(1).Destination_B</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Bag(0).Finish</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Bag(1).Finish</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; forall(i:t_id) Bag(i).Finish</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt;(Bag(1).Destination_A and Bag(1).x &lt;82)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; (Bag(0).Destination_A and Bag(1).x &gt;=79)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; (Bag(1).Destination_A and Bag(1).x &gt;=79)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; (Bag(1).Destination_A || Bag(1).Destination_B )</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Bag(0).Destination_A --&gt; Bag(0).Finish</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (forall(i:t_id) Bag(i).fb0_pre_sensor &lt;=1 and Bag(i).fb0_sensor &lt;=1 and Bag(i).fb0_post_sensor &lt;=1 and Bag(i).fb0_pre_stop&lt;=1 and Bag(i).fb0_stop&lt;=1) </formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (forall(i:t_id) Bag(i).fb1_pre_sensor &lt;=1 and Bag(i).fb1_sensor &lt;=1 and Bag(i).fb1_post_sensor &lt;=1 and Bag(i).fb1_pre_stop&lt;=1 and Bag(i).fb1_stop&lt;=1) </formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (forall(i:t_id) Bag(i).c1 &lt;=1 and Bag(i).c2&lt;=1 and Bag(i).d1 &lt;=1 and Bag(i).d2&lt;=1 and Bag(i).e1&lt;=1 and Bag(i).e2&lt;=1 and Bag(i).f&lt;=1) </formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Bag(1).x_bag &gt;= 200 imply (Bag(1).Destination_A || Bag(1).Destination_B )</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (Bag(1).Destination_A imply Bag(1).color == BLACK) 
     and (Bag(1).Destination_B imply Bag(1).color == YELLOW)</formula>
			<comment>Verified </comment>
		</query>
		<query>
			<formula>A[] (collision[0] &lt;= 1 and collision[1] &lt;= 1)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] ( forall(i:t_id) Bag(i).fb0_pre_sensor &lt;=1 
      and Bag(i).fb0_sensor &lt;=1 and Bag(i).fb0_post_sensor &lt;=1 
      and Bag(i).fb0_pre_stop&lt;=1 and Bag(i).fb0_stop&lt;=1        ) </formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] ( forall(i:t_id) Bag(i).fb1_pre_sensor &lt;=1 
      and Bag(i).fb1_sensor &lt;=1 and Bag(i).fb1_post_sensor &lt;=1 
      and Bag(i).fb1_pre_stop&lt;=1 and Bag(i).fb1_stop&lt;=1        ) 
</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] ( forall(i:t_id) Bag(i).c1 &lt;=1 and Bag(i).c2&lt;=1
      and Bag(i).d1 &lt;=1 and Bag(i).d2&lt;=1 and Bag(i).e1&lt;=1 
      and Bag(i).e2&lt;=1 and Bag(i).f&lt;=1                         ) </formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (forall(i:t_id)(Bag(i).c1) imply (feed_on[0]!=0 and feed_on[1]!=0 and dis_on!=0))</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (forall(i:t_id) ((Bag(i).c1) or (Bag(i).c2) or (Bag(i).d1) or (Bag(i).d2) or
(Bag(i).e1) or (Bag(i).e2) or (Bag(i).f)) imply (dis_on!=0))</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Bag(1).x_bag &gt;= 200 imply (Bag(1).Destination_A || Bag(1).Destination_B ) 
</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Bag(0).initial --&gt; Bag(0).Finish</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>Bag(0).fb0_pre_sensor --&gt; Bag(0).Finish</formula>
			<comment></comment>
		</query>
		<query>
			<formula>forall(i:t_id) Bag(i).fb0_pre_sensor --&gt; forall(i:t_id) Bag(i).Destination_A</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] singleFeedBelt imply not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] singleFeedBelt imply not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E[] forall(i:t_id) Bag(i).color==YELLOW --&gt; Bag(i).Destination_B</formula>
			<comment>deadlock check </comment>
		</query>
		<query>
			<formula>E&lt;&gt; Bag(0).Destination_A</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Bag(0).Destination_B</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Bag(0).Finish</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Bag(1).Finish</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; forall(i:t_id) Bag(i).Finish</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[](Bag(1).Destination_A imply (Bag(1).x_bag &gt;=74 and Bag(1).x_bag &lt;=79))</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[](Bag(1).Destination_A imply (Bag(1).x_bag &gt;=74 and Bag(1).x_bag &lt;=133))</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[](not (Bag(1).fb0_stopped or Bag(1).fb1_stopped) imply (Bag(1).Destination_A imply (Bag(1).x_bag &gt;=74 and Bag(1).x_bag &lt;=79)))</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (Bag(0).Destination_A imply Bag(0).x_bag &gt;=74)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; (Bag(1).Destination_A and Bag(1).x &gt;=79)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt;(Bag(1).Destination_A || Bag(1).Destination_B )</formula>
			<comment>not finished</comment>
		</query>
		<query>
			<formula>Bag(0).Destination_A --&gt; Bag(0).Finish</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Bag(0).color== YELLOW --&gt; Bag(0).Destination_B</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] ((Bag(0).color == YELLOW) imply A&lt;&gt; Bag(0).Destination_B)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (collision[0] &lt;= 1 and collision[1] &lt;= 1)</formula>
			<comment>for all the paths, there will be no collition in the critical area collision zero or one</comment>
		</query>
		<query>
			<formula>E[] (collision[0] &lt;= 1 and collision[1] &lt;= 1)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Bag(0).Initalized --&gt; Bag(0).Finish</formula>
			<comment>All the bags in destination A will arrive to state finish</comment>
		</query>
		<query>
			<formula>A[] (forall(i:t_id)(Bag(i).c1) imply (feed_on[0]!=0 and feed_on[1]!=0 and dis_on!=0))</formula>
			<comment></comment>
		</query>
		<query>
			<formula>--&gt;</formula>
			<comment>leads to </comment>
		</query>
		<query>
			<formula>A[] Bag(0).Destination_A imply Bag(0).color == BLACK
</formula>
			<comment>For all the execution paths, the bag zero in destination A have a the black color.</comment>
		</query>
		<query>
			<formula>A[] Bag(1).Destination_A imply Bag(1).color == BLACK
</formula>
			<comment>For all the execution paths, the bag one in destination A have a the black color.</comment>
		</query>
		<query>
			<formula>A[] (Bag(1).Destination_A imply Bag(1).color == BLACK) and (Bag(1).Destination_B imply Bag(1).color == YELLOW) 
</formula>
			<comment>For all the execution paths, the bag one in destination A have a the black color. In the other case that the same bag in in destination B then in have the color yellow. </comment>
		</query>
		<query>
			<formula>A&lt;&gt; (Bag(0).Destination_A or Bag(0).Destination_B)</formula>
			<comment>There exists a path where bag zero gets to either destination A or destination B</comment>
		</query>
		<query>
			<formula>E&lt;&gt;(Bag(0).Initalized) --&gt; (Bag(0).Destination_A or Bag(0).Destination_B) </formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; (Bag(1).Destination_A or Bag(1).Destination_B)</formula>
			<comment>There exists a path where bag one gets to either destination A or destination B</comment>
		</query>
		<query>
			<formula>E&lt;&gt; forall(i:t_id)(Bag(i).Destination_A or Bag(i).Destination_B)</formula>
			<comment>There exists a path where all the bags in the sysyem gets to either destination A or destination B</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Bag(1).Destination_B</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Bag(0).Finish</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Bag(1).Finish</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; forall(i:t_id) Bag(i).Finish</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt;(Bag(1).Destination_A and Bag(1).x &lt;82)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; (Bag(0).Destination_A and Bag(1).x &gt;=79)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; (Bag(1).Destination_A and Bag(1).x &gt;=79)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; (Bag(1).Destination_A || Bag(1).Destination_B )</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Bag(0).Destination_A --&gt; Bag(0).Finish</formula>
			<comment></comment>
		</query>
		<query>
			<formula>forall(i:t_id) Bag(i).</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt;  Bag(1).Initalized --&gt; (Bag(1).Destination_A || Bag(1).Destination_B )</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
