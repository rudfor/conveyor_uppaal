<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

// Belts
const int N=2;        // Controller, Feed Belt
typedef int[0, N-1] f_id;
typedef int[0, N+1] p_id;     // Priority ID - Number of Controllers and one for Idle Controller 0 is highest priority

// Signals from Sensor Per Controller
bool S[N]; //Sensor breach from laser
bool R[N]; //Recording on

// Items Grouped per FeedBelt to reduce tree complexity
const int NUM_ITEMS=2;
typedef int[0, NUM_ITEMS-1] t_id;

// Limit run - Set Maximum number of itterations to avoid infinite loop and check for Deadlock 
int MAX_ITEMS=10;
int ITEM_COUNT=0;

// Counter for number of recordings
int RECORD =0;

// Allow multiple types of products for identification
const int NUM_ITEM_TYPES=1;
typedef scalar[NUM_ITEM_TYPES] s_t;

// Coutner for Identified Objects - removed to avoid complexity
int array[NUM_ITEM_TYPES];

//int ItemDetected;


// Channels Decrlarations
chan ItemArrive[N];

urgent broadcast chan go;
urgent chan recordOn, recordOff;

//Sleeping time of the control and item feeder
int sleep09 = 9; 
int sleep05 = 5;  
int sleep23 = 23; // Minimum delay between Item Arrival

// Scheduling parameters (only used by process 0)
//const int T[f_id] = {3};		// Periods 
//const int D[f_id] = {3};
//const int C[f_id] = {2};		// Execution times 

const int MaxC  =  5;			// Maximum cputime used
const int DELTA = -1;                   // Special CPU-time indicating a preemptable (almost) zero value
const int INF   = -2;                   // Special value to be used by the IDLE process

// Scheduling signals (initialized by Scheduler)
// For proper use, see the Scheduler declarations

int[INF,MaxC] need[p_id];             // CPU time needed  (set/reset by process, decremented by scheduler)
bool           run[p_id];             // Run flag (set by scheduler, used as guard by process)
</declaration>
	<template>
		<name>Video</name>
		<parameter>f_id feed_id</parameter>
		<declaration>clock x;</declaration>
		<location id="id0" x="42" y="68">
			<name x="17" y="76">On</name>
		</location>
		<location id="id1" x="42" y="-17">
			<name x="34" y="-51">Off</name>
		</location>
		<location id="id2" x="-68" y="-17">
			<name x="-119" y="-51">Finish</name>
			<urgent/>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="-59" y="0">not R[feed_id]</label>
			<label kind="synchronisation" x="-59" y="17">go!</label>
			<label kind="assignment" x="-59" y="34">RECORD++</label>
			<nail x="-68" y="68"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="85" y="0">R[feed_id]</label>
			<label kind="synchronisation" x="85" y="17">go!</label>
			<label kind="assignment" x="85" y="34">x:=0</label>
			<nail x="76" y="0"/>
			<nail x="76" y="51"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Item</name>
		<parameter>t_id item_id, f_id feed_id</parameter>
		<declaration>// Place local declarations here.
clock t1;     //Time when Sensor Breach
clock t2;     //Time when Sensor Clear
</declaration>
		<location id="id3" x="102" y="280">
			<name x="119" y="255">LeftVideoZone</name>
			<label kind="comments" x="229" y="263">Item: Leaves video zone at t1+2.0 s</label>
			<urgent/>
		</location>
		<location id="id4" x="102" y="212">
			<name x="17" y="178">VideoZone</name>
			<label kind="invariant" x="119" y="203">t1&lt;=20</label>
			<label kind="comments" x="229" y="195">Item: Enters video zone at t2+0.5 s</label>
		</location>
		<location id="id5" x="102" y="144">
			<name x="0" y="110">PreVideoZone</name>
			<label kind="invariant" x="119" y="135">t2&lt;=5</label>
		</location>
		<location id="id6" x="102" y="51">
			<name x="8" y="17">LaserBreach</name>
			<label kind="invariant" x="119" y="42">t1&lt;=5</label>
			<label kind="comments" x="229" y="25">P1: Items block the laser beam 
      between 0.3 and 0.5 seconds 
      whilst passing the sensor</label>
		</location>
		<location id="id7" x="102" y="-68">
			<name x="111" y="-102">initial</name>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="guard" x="110" y="161">t2==5</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id7"/>
			<nail x="0" y="246"/>
			<nail x="0" y="-17"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="110" y="229">t1==20</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="guard" x="110" y="68">t1&gt;=3</label>
			<label kind="assignment" x="110" y="85">S[feed_id]=false, 
t2:=0</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="110" y="-59">ItemArrive[feed_id]?</label>
			<label kind="assignment" x="110" y="-42">t1:=0, 
ITEM_COUNT++,
S[feed_id]=true</label>
		</transition>
	</template>
	<template>
		<name>Controller</name>
		<parameter>f_id feed_id</parameter>
		<declaration>// Place local declarations here.
clock x;        //From Sensor Clear
clock y;        //from Sensor Breach

//int ItemIdentified;
</declaration>
		<location id="id8" x="-306" y="-153">
			<name x="-442" y="-178">RecordTermination</name>
		</location>
		<location id="id9" x="-306" y="-255">
			<name x="-391" y="-280">Recording</name>
			<label kind="invariant" x="-289" y="-272">x&lt;=sleep05</label>
			<label kind="comments" x="-178" y="-272">Recording</label>
		</location>
		<location id="id10" x="-306" y="18">
			<name x="-442" y="-8">SendIdentification</name>
		</location>
		<location id="id11" x="-306" y="77">
			<name x="-289" y="69">EndLoop</name>
			<urgent/>
		</location>
		<location id="id12" x="-306" y="-42">
			<name x="-408" y="-67">ProcessVideo</name>
		</location>
		<location id="id13" x="-306" y="-93">
			<name x="-399" y="-119">ReceiveData</name>
			<committed/>
		</location>
		<location id="id14" x="-306" y="-322">
			<name x="-416" y="-348">RecordRequest</name>
		</location>
		<location id="id15" x="-306" y="-425">
			<name x="-391" y="-450">preRecord</name>
			<label kind="invariant" x="-289" y="-434">x&lt;=sleep09</label>
			<label kind="comments" x="-178" y="-434">5 ds after object passed through sensor: 
         allow record to start</label>
		</location>
		<location id="id16" x="-306" y="-612">
			<name x="-289" y="-637">StartLoop</name>
		</location>
		<location id="id17" x="-306" y="-518">
			<name x="-374" y="-544">Recive_S</name>
			<label kind="comments" x="-178" y="-527">Item in Sensor Zone</label>
		</location>
		<init ref="id16"/>
		<transition>
			<source ref="id8"/>
			<target ref="id13"/>
			<label kind="guard" x="-297" y="-144">need[feed_id]==0</label>
			<label kind="synchronisation" x="-297" y="-127">go!</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id9"/>
			<label kind="guard" x="-297" y="-314">need[feed_id]==0</label>
			<label kind="synchronisation" x="-297" y="-297">go!</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-297" y="35">go!</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-297" y="-33">go!</label>
			<label kind="assignment" x="-297" y="-17">need[feed_id]=5</label>
			<label kind="comments" x="-178" y="-17">Process Video request</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id15"/>
			<label kind="guard" x="-297" y="-501">not S[feed_id]</label>
			<label kind="synchronisation" x="-297" y="-467">go!</label>
			<label kind="assignment" x="-297" y="-484">x:=0</label>
			<label kind="comments" x="-178" y="-501">Sensor Clear
- reset clock x
[in Item referred to as t2]</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id16"/>
			<nail x="-450" y="43"/>
			<nail x="-450" y="-510"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="guard" x="-297" y="-246">x==sleep05</label>
			<label kind="assignment" x="-297" y="-229">x:=0, 
R[feed_id]=false,
need[feed_id]=1</label>
			<label kind="comments" x="-178" y="-187">Record Termination Request</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="guard" x="-297" y="-408">x==sleep09</label>
			<label kind="assignment" x="-297" y="-391">x:=0,
R[feed_id]=true,
need[feed_id]=1</label>
			<label kind="comments" x="-178" y="-348">Record Request</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="guard" x="-297" y="-595">S[feed_id]</label>
			<label kind="synchronisation" x="-297" y="-561">go!</label>
			<label kind="assignment" x="-297" y="-578">y:=0</label>
			<label kind="comments" x="-178" y="-595">Sensor Breached
- reset clock y
[in Item referred to as t1]</label>
		</transition>
	</template>
	<template>
		<name>Scheduler</name>
		<declaration>clock x;        // Scheduler Clock
p_id current;

const int IDLE = N+1;

void initialize()
{
    current = IDLE;
    need[IDLE] = INF;
    run[current] = true;
}


int maxprio()
{
    for(pid:p_id)
    {
        if(need[pid] != 0)
            return pid;
    }
    return -1; //should not happen.
}

void decrement(p_id pid)
{
    if(need[pid] &gt; 0)
        --need[pid];
    //else need == DELTA or need == INF 
}
</declaration>
		<location id="id18" x="-756" y="-408">
			<label kind="comments" x="-731" y="-433">Introduce final state for 
deadlock verification</label>
		</location>
		<location id="id19" x="-510" y="-493">
			<name x="-493" y="-501">Reschedule</name>
			<label kind="invariant" x="-520" y="-476">x&lt;1</label>
			<label kind="comments" x="-527" y="-450">Invariant ensures that all 
processes which are done
are handled before a 
reschedule is attempted.</label>
			<committed/>
		</location>
		<location id="id20" x="-756" y="-663">
			<committed/>
		</location>
		<location id="id21" x="-510" y="-663">
			<name x="-493" y="-680">Run</name>
			<label kind="invariant" x="-527" y="-646">x&lt;=1</label>
		</location>
		<location id="id22" x="-510" y="-731">
			<name x="-544" y="-756">Init</name>
			<label kind="invariant" x="-484" y="-739">x&lt;=4</label>
			<committed/>
		</location>
		<init ref="id22"/>
		<transition>
			<source ref="id18"/>
			<target ref="id18"/>
			<nail x="-756" y="-357"/>
			<nail x="-722" y="-357"/>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id18"/>
			<label kind="guard" x="-748" y="-459">MAX_ITEMS&lt;=ITEM_COUNT</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="guard" x="-748" y="-756">need[current]!=0 and 
MAX_ITEMS&gt;ITEM_COUNT</label>
			<nail x="-757" y="-714"/>
			<nail x="-587" y="-714"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id21"/>
			<label kind="assignment" x="-476" y="-603">run[current] = false,
current = maxprio(),
run[current] = true</label>
			<nail x="-484" y="-518"/>
			<nail x="-484" y="-637"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id19"/>
			<label kind="guard" x="-688" y="-595">maxprio() != current</label>
			<label kind="synchronisation" x="-578" y="-578">go!</label>
			<nail x="-544" y="-637"/>
			<nail x="-544" y="-518"/>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="guard" x="-697" y="-518">need[current]==0</label>
			<nail x="-714" y="-612"/>
			<nail x="-714" y="-493"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="guard" x="-705" y="-680">x==1</label>
			<label kind="assignment" x="-705" y="-663">x=0, decrement(current)</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="assignment" x="-501" y="-714">initialize()</label>
		</transition>
	</template>
	<template>
		<name>ItemFeeder</name>
		<parameter>f_id feed_id</parameter>
		<declaration>// Place local declarations here.
clock x;        //per element clock
</declaration>
		<location id="id23" x="-136" y="-331">
			<label kind="comments" x="-110" y="-348">Limit number of itterations for 
simulation by creating a "deadend"</label>
		</location>
		<location id="id24" x="-136" y="-408">
			<label kind="comments" x="-110" y="-493">P2: The minimum distance 
      between item arrivals is 2.3 s</label>
		</location>
		<init ref="id24"/>
		<transition>
			<source ref="id23"/>
			<target ref="id23"/>
			<nail x="-170" y="-297"/>
			<nail x="-136" y="-297"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="guard" x="-127" y="-374">MAX_ITEMS&lt;=ITEM_COUNT</label>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id24"/>
			<label kind="guard" x="-85" y="-450">ITEM_COUNT==0 or 
(x&gt;=sleep23 and MAX_ITEMS&gt;ITEM_COUNT)</label>
			<label kind="synchronisation" x="-85" y="-408">ItemArrive[feed_id]!</label>
			<label kind="assignment" x="-85" y="-391">x:=0</label>
			<nail x="-93" y="-374"/>
			<nail x="-93" y="-450"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
//Item = Item();
//ItemFeeder0 = ItemFeeder(0);
//ItemFeeder1 = ItemFeeder(1);
// List one or more processes to be composed into a system.
system Item, Controller, ItemFeeder,  Video, Scheduler;</system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment>Sanity check: system should not enter a (time-) deadlock</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Item(0,0).LeftVideoZone</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt;(Item(0,0).LeftVideoZone and Item(0,0).t1 ==20)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Video(0).On</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Video(0).Off</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (Video(0).Finish imply ( (Video(0).x &gt;=4) and (Item(0,0).VideoZone or Item(1,0).VideoZone ) ) )</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] forall(i:f_id) (Video(i).Finish imply ( (Video(i).x &gt;=4) and (Item(0,i).VideoZone or Item(1,i).VideoZone ) ) )</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (RECORD &gt;= ITEM_COUNT) and 
(Video(0).On imply (Item(0,0).VideoZone or Item(1,0).VideoZone)) and 
(Video(0).Finish imply ((Video(0).x &gt;=4) and (Item(0,0).VideoZone or Item(1,0).VideoZone))) 
</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (RECORD &lt;= ITEM_COUNT) and 
((Item(0,0).initial and Item(1,0).initial) imply RECORD==ITEM_COUNT) and 
(Video(0).On imply (Item(0,0).VideoZone or Item(1,0).VideoZone)) and 
(Video(0).Finish imply ((Video(0).x &gt;=4) and (Item(0,0).VideoZone or Item(1,0).VideoZone))) 
</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (Item(0,0).initial and Item(1,0).initial) imply RECORD==ITEM_COUNT</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] Video(0).On imply (Item(0,0).VideoZone or Item(1,0).VideoZone ) </formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Controller(1).RecordRequest and need[0]&gt;=5</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Controller(1).RecordRequest and need[0]&lt;6</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
